import java.util.regex.Pattern


def final LOGGER = System.getenv("SPRING_LOGGER") ?: ['logging', "log4j2"][0]


/******************************************************************
 * Checkout Task*/
def final gradleTask = gradle.startParameter.taskRequests
def final currentDir = gradle.startParameter.currentDir
def final gradleTaskArgs = gradleTask ? gradleTask.args : []

def final isCheck = gradle.startParameter.taskNames.contains("check")
def final isTest = gradle.startParameter.taskNames.contains("test")


def taskDir = null
def tasks = []
gradleTaskArgs.forEach({ args ->
    args.forEach({ arg ->
        arg = arg.startsWith(":") ? arg.substring(1) : arg
        def projectName = null
        def commandName = arg
        if (arg.contains(":")) {
            projectName = arg.split(":")[0]
            commandName = arg.split(":")[1]
        }
        if (commandName && !commandName.isBlank()) {
            tasks.add(commandName)
        }
        if (projectName && projectName.length() > 0) {
            taskDir = new File(currentDir, projectName)
        }
    })
})
if (!taskDir) {
    taskDir = currentDir
}
if (!taskDir.exists()) {
    throw new Exception("${taskDir} is not exists")
}

/******************************************************************
 *
 * Project Env*/

// is project or not
def isRootProject = project.projectDir == rootProject.projectDir
def isSubProject = !isRootProject && new File(project.projectDir, "build.gradle").exists()

//
def mainClasses = fileTree(project.projectDir) {
    include "src/main/java/**/*Application.java"
    include "src/main/java/**/*Application.kt"
    include "src/main/kotlin/**/*Application.java"
    include "src/main/kotlin/**/*Application.kt"
}.filter {
    it.isFile()
}.filter {
    def text = it.text
    Pattern.compile("public\\s+static\\s+void\\s+main\\(String\\[]\\s+\\w+\\)")
            .matcher("${text}")
            .find()
            ||
            Pattern.compile("fun\\s+main\\(args:\\s+Array<String>\\)")
                    .matcher("${text}")
                    .find()
}.files
def isApplication = mainClasses.size() > 0
def isLibrary = isSubProject && !isApplication

/******************************************************************
 * Task Env*/
def final isUnix = new File("").getAbsolutePath().startsWith("/")
def final isTaskProject = taskDir == project.projectDir
def final isJar = tasks.contains("jar")
def final isBootJar = tasks.contains("bootJar")
def final isInstall = tasks.contains("install")
def final isPublish = tasks.contains("upload") || tasks.contains("publish")
def final isPackage = isJar || isBootJar || isInstall || isPublish

if (isTaskProject) {
    if (isLibrary && isBootJar) {
        throw new Exception("project <${project.name}> is library, cannot run task [bootJar]")
    } else if (!isLibrary && isJar) {
        throw new Exception("project <${project.name}> is application, cannot run task [jar]")
    }
}

/****************************************************************
 * Project Ext Properties*/

// load profile
def profileSystem = System.properties['spring.profiles.active']
def profileProject
if (project.hasProperty('prod') || project.hasProperty('production') || project.hasProperty('release')) {
    profileProject = "release"
} else if (project.hasProperty('preview')) {
    profileProject = "preview"
} else {
    profileProject = "debug"
}
def profile = profileSystem ? profileSystem : profileProject


ext.LOGGER = LOGGER

ext.isCheck = isCheck
ext.isTest = isTest

ext.isUnix = isUnix
ext.isJar = isJar
ext.isBootJar = isBootJar
ext.isInstall = isInstall
ext.isPublish = isPublish
ext.isPackage = isPackage

ext.isProject = isSubProject
ext.isLibrary = isLibrary
ext.isApplication = isApplication
ext.publish = isLibrary
ext.publishSources = isLibrary
ext.profile = profile

ext.isNativeEnable = ext.isApplication && !ext.isTest && !ext.isCheck


if (isApplication) {
    println "found app ===> ${project.projectDir.name}, profile = ${profile}, logger = ${LOGGER}"
}
if (isLibrary) {
    println "found lib ---> ${project.projectDir.name}, profile = ${profile}, logger = ${LOGGER}"
}
